---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/x-icon" href="http://oss.talesofai.cn/static/talesofai-h5/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
  <script>
    import lottie from 'lottie-web';
    import Tower from '@assets/lottie/tower.json?url';
    import Ball from '@assets/lottie/ball.json?url';
    const animation1 = lottie.loadAnimation({
      container: document.querySelector('#tower'), // Required
      path: Tower, // Required
      renderer: 'svg', // Required
      loop: true, // Optional
      autoplay: true, // Optional
      name: 'tower', // Name for future reference. Optional.
    });

    const animation2 = lottie.loadAnimation({
      container: document.querySelector('#ball'), // Required
      path: Ball, // Required
      renderer: 'svg', // Required
      loop: true, // Optional
      autoplay: true, // Optional
      name: 'ball', // Name for future reference. Optional.
    });
  </script>
</html>
<style is:global lang="scss">
  @use 'src/styles/_styles375' as *;
  @use 'src/styles/_styles744' as *;
  @use 'src/styles/_styles1024' as *;
  @use 'src/styles/_styles1440' as *;
  @use 'src/styles/_styles1920' as *;

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  body {
    display: grid;
    height: 100vh;
  }
  // 大于等于1920px
  @media screen and (min-width: 1920px) {
    @include layout-1920;
    body {
      grid-template-rows: 5.33rem 5.33rem 3.42rem 3.79rem 0.33rem;
    }
  }
  // 大于等于1440小于等于1919
  @media screen and (min-width: 1440px) and (max-width: 1919px) {
    @include layout-1440;
    body {
      grid-template-rows: 7.11rem 7.11rem 4.56rem 5.05rem 0.44rem;
    }
  }
  // 大于等于1024小于等于1439
  @media screen and (min-width: 1024px) and (max-width: 1439px) {
    @include layout-1024;
    body {
      grid-template-rows: 7.11rem 7.11rem 5.625rem 5.78rem 0.625rem;
    }
  }
  // 大于等于744小于等于1024
  @media screen and (min-width: 744px) and (max-width: 1023px) {
    @include layout-744;
    body {
      grid-template-rows: 14.96rem 14.96rem 7.53rem 14.58rem 0.65rem;
    }
  }

  @media screen and (max-width: 743px) {
    @include layout-375;
    body {
      grid-template-rows: 21.65rem 21.65rem 11.84rem 17.79rem 2.8rem;
    }
  }
</style>
<script is:inline>
  (function flexible(window, document) {
    var docEl = document.documentElement;
    var dpr = window.devicePixelRatio || 1;

    // adjust body font size
    function setBodyFontSize() {
      if (document.body) {
        document.body.style.fontSize = 12 * dpr + 'px';
      } else {
        document.addEventListener('DOMContentLoaded', setBodyFontSize);
      }
    }
    setBodyFontSize();

    // set 1rem = viewWidth / 10
    function setRemUnit() {
      var rem = docEl.clientWidth / 10;
      docEl.style.fontSize = rem + 'px';
    }

    setRemUnit();

    // reset rem unit on page resize
    window.addEventListener('resize', setRemUnit);
    window.addEventListener('pageshow', function (e) {
      if (e.persisted) {
        setRemUnit();
      }
    });

    // detect 0.5px supports
    if (dpr >= 2) {
      var fakeBody = document.createElement('body');
      var testElement = document.createElement('div');
      testElement.style.border = '.5px solid transparent';
      fakeBody.appendChild(testElement);
      docEl.appendChild(fakeBody);
      if (testElement.offsetHeight === 1) {
        docEl.classList.add('hairlines');
      }
      docEl.removeChild(fakeBody);
    }
  })(window, document);
</script>
