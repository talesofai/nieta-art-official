---
// import { PAGInit } from 'libpag';
interface Props {
  title: string;
}

const { title } = Astro.props;
// PAGInit().then((PAG) => {
//   const url = './like.pag';
//   fetch(url)
//     .then((response) => response.blob())
//     .then(async (blob) => {
//       const file = new window.File([blob], url.replace(/(.*\/)*([^.]+)/i, '$2'));
//       const pagFile = await PAG.PAGFile.load(file);
//       (document.getElementById('pag') as HTMLCanvasElement).width = pagFile.width();
//       (document.getElementById('pag') as HTMLCanvasElement).height = pagFile.height();
//       const pagView = await PAG.PAGView.init(pagFile, '#pag');
//       pagView?.setRepeatCount(0);
//       await pagView?.play();
//     });
// });
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
  <!-- <script src="https://cdn.jsdelivr.net/npm/libpag@latest/lib/libpag.min.js"></script> -->
  <!-- <script>
    window.onload = async () => {
      const pagUrl = '../assets/pag/角色1_bmp.pag';
      // Initialize pag webassembly module.
      const PAG = await window.libpag.PAGInit();
      console.log('PAG', PAG);
      // Fetch pag file.
      const buffer = await fetch(pagUrl).then((response) => response.arrayBuffer());
      // Load the PAGFile from file.
      const pagFile = await PAG.PAGFile.load(buffer);
      // Set the width from the PAGFile.
      const canvas = document.getElementById('pag');
      canvas.width = pagFile.width();
      canvas.height = pagFile.height();
      // Create PAGView.
      const pagView = await PAG.PAGView.init(pagFile, canvas);
      // Set PAGView play infinity.
      pagView.setRepeatCount(0);
      await pagView.play();
    };
  </script> -->
</html>
<style is:global lang="scss">
  @use 'src/styles/_styles375' as *;
  @use 'src/styles/_styles744' as *;
  @use 'src/styles/_styles1440' as *;
  @use 'src/styles/_styles1920' as *;

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  body {
    display: grid;
    height: 100vh;
  }

  @media screen and (min-width: 1920px) {
    @include layout-1920;
    body {
      grid-template-rows: 5.33rem 5.33rem 3.42rem 3.79rem 0.33rem;
    }
  }

  @media screen and (min-width: 1440px) and (max-width: 1919px) {
    @include layout-1440;
    body {
      grid-template-rows: 7.11rem 7.11rem 4.56rem 5.05rem 0.44rem;
    }
  }

  @media (min-width: 744px) and (max-width: 1439px) {
    @include layout-744;
    body {
      grid-template-rows: 14.96rem 14.96rem 7.53rem 14.58rem 0.65rem;
    }
  }
  @media screen and (max-width: 743px) {
    @include layout-375;
    body {
      grid-template-rows: 21.65rem 21.65rem 11.84rem 17.79rem 2.8rem;
    }
  }
</style>
<script is:inline>
  (function flexible(window, document) {
    var docEl = document.documentElement;
    var dpr = window.devicePixelRatio || 1;

    // adjust body font size
    function setBodyFontSize() {
      if (document.body) {
        document.body.style.fontSize = 12 * dpr + 'px';
      } else {
        document.addEventListener('DOMContentLoaded', setBodyFontSize);
      }
    }
    setBodyFontSize();

    // set 1rem = viewWidth / 10
    function setRemUnit() {
      var rem = docEl.clientWidth / 10;
      docEl.style.fontSize = rem + 'px';
    }

    setRemUnit();

    // reset rem unit on page resize
    window.addEventListener('resize', setRemUnit);
    window.addEventListener('pageshow', function (e) {
      if (e.persisted) {
        setRemUnit();
      }
    });

    // detect 0.5px supports
    if (dpr >= 2) {
      var fakeBody = document.createElement('body');
      var testElement = document.createElement('div');
      testElement.style.border = '.5px solid transparent';
      fakeBody.appendChild(testElement);
      docEl.appendChild(fakeBody);
      if (testElement.offsetHeight === 1) {
        docEl.classList.add('hairlines');
      }
      docEl.removeChild(fakeBody);
    }
  })(window, document);
</script>
